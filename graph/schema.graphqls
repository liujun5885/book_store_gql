type Book {
    id: ID!
    title: String!
    description: String!
    pages: Int!
    language: String!
    authors: [Author]
    publishers: [Publisher]
    url: String!
    createdAt: Time!
    updatedAt: Time!
}

type Author {
    id: ID!
    name: String!
    nationality: String!
    description: String!
    createdAt: Time!
    updatedAt: Time!
    books: [Book]
}

type Publisher {
    id: ID!
    name: String!
    headquarter: String!
    description: String!
    createdAt: Time!
    updatedAt: Time!
    books: [Book]
}

type AuthToken {
    accessToken: String!
    expiration: Time!
}

enum RegisterCode {
    Succeeded
    Failed
}

enum LoginCode {
    Succeeded
    InvalidPassword
    InvalidEmail
}

type RegisterResponse {
    code: RegisterCode!
    authToken: AuthToken
    user: User
}

type LoginResponse {
    authToken: AuthToken
    code: LoginCode!
    user: User
}

type User {
    id: ID!,
    email: String!
    phoneNumber: String!
    firstName: String!
    lastName: String!
    verified: Boolean!
    createdAt: Time!
    lastLogin: Time
}

input RegisterInput {
    email: String!
    password: String!
    phoneNumber: String
    username: String
    firstName: String
    lastName: String
}

input LoginInput {
    email: String!
    password: String!
}

scalar Time

type Query {
    searchBooks(keyword: String!): [Book]
    fetchCurrentUser: User
}

type Mutation {
    register(input: RegisterInput!): RegisterResponse
    login(input: LoginInput!): LoginResponse
}
