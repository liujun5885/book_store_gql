extend type RootQuery {
    fetchCurrentUser: User
}

extend type RootMutation {
    register(input: RegisterInput!): RegisterResponse
    login(input: LoginInput!): LoginResponse
    updateUser(input: UpdateUserInput!): User
}

type AuthToken {
    accessToken: String!
    expiration: Time!
}

enum RegisterCode {
    Succeeded
    Failed
}

enum LoginCode {
    Succeeded
    InvalidPassword
    InvalidEmail
}

type RegisterResponse {
    code: RegisterCode!
    authToken: AuthToken
    user: User
}

type LoginResponse {
    authToken: AuthToken
    code: LoginCode!
    user: User
}

type User {
    id: ID!
    email: String!
    phoneNumber: String!
    firstName: String!
    lastName: String!
    verified: Boolean!
    createdAt: Time!
    lastLogin: Time
    profile: UserProfile
    settings: UserSettings
}

type UserProfile {
    userID: ID!
    address: String
    city: String
    province: String
    country: String
    job: String
    school: String
}

type UserSettings {
    userID: ID!
    kindleAccount: String
}

input RegisterInput {
    email: String!
    password: String!
    phoneNumber: String
    username: String
    firstName: String
    lastName: String
}

input LoginInput {
    email: String!
    password: String!
}

input UserBasicInput {
    email: String!
    phoneNumber: String!
    firstName: String!
    lastName: String!
}

input UserProfileInput {
    address: String
    city: String
    province: String
    country: String
    job: String
    school: String
}

input UserSettingsInput {
    kindleAccount: String
}

input UpdateUserInput {
    basic: UserBasicInput
    profile: UserProfileInput
    settings: UserSettingsInput
}

